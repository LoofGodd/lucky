defmodule Betting.Repo.Migrations.Init do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :role, :text, default: "mederator"
      add :hashed_password, :text, null: false
      add :confirmed_at, :utc_datetime_usec

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:players, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :username, :text
      add :role, :text, default: "player"
      add :status, :text, default: "active"
      add :risk_level, :text, default: "low"
      add :metadata, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :company_id, :uuid
    end

    create table(:campanies, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:players) do
      modify :company_id,
             references(:campanies,
               column: :id,
               name: "players_company_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:players, [:company_id, :username],
             name: "players_unique_username_companry_index"
           )

    alter table(:campanies) do
      add :name, :text, null: false
      add :slug, :text, null: false
      add :url, :text
      add :metadata, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:campanies, [:slug], name: "campanies_slug_index")
  end

  def down do
    drop_if_exists unique_index(:campanies, [:slug], name: "campanies_slug_index")

    alter table(:campanies) do
      remove :updated_at
      remove :inserted_at
      remove :metadata
      remove :url
      remove :slug
      remove :name
    end

    drop_if_exists unique_index(:players, [:company_id, :username],
                     name: "players_unique_username_companry_index"
                   )

    drop constraint(:players, "players_company_id_fkey")

    alter table(:players) do
      modify :company_id, :uuid
    end

    drop table(:campanies)

    drop table(:players)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end

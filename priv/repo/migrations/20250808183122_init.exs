defmodule Betting.Repo.Migrations.Init do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :username, :text, null: false
      add :balance, :float, default: 0.0
      add :role, :text, default: "user"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :company_id, :uuid, null: false
    end

    create table(:campanies, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:users) do
      modify :company_id,
             references(:campanies,
               column: :id,
               name: "users_company_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:users, [:company_id, :username], name: "users_username_in_company_index")

    alter table(:campanies) do
      add :name, :text, null: false
      add :slug, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:campanies, [:slug], name: "campanies_slug_index")
  end

  def down do
    drop_if_exists unique_index(:campanies, [:slug], name: "campanies_slug_index")

    alter table(:campanies) do
      remove :updated_at
      remove :inserted_at
      remove :slug
      remove :name
    end

    drop_if_exists unique_index(:users, [:company_id, :username],
                     name: "users_username_in_company_index"
                   )

    drop constraint(:users, "users_company_id_fkey")

    alter table(:users) do
      modify :company_id, :uuid
    end

    drop table(:campanies)

    drop table(:users)
  end
end
